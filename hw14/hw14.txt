
# Импортировал класс Employee() из папки sample3/oop
    
    import Employee as c

# Добавил пользователя Mary используя класс

    Mary = c.Employee('Mary', '6666')
   
# Импортировал модуль Pickle
    
    import pickle

# Открыл файл 'Mary_object' для бинарной записи и записал туда объект Mary, используя модуль Pickle и протокол 4 версии.

    with open('Mary_object', 'wb') as f:
        pickle.dump(Mary, f, protocol=4)

# Получил на файловой системе файл Mary_object. Открыл новую сессию интерпретатора Python3 и импортировал модуль Pickle

    python3
    import pickle

# Открыл файл Mary_object для чтения в бинарном режиме и присвоил переменной Mary объект Mary из открытого файла

    with open('Mary_object', 'rb') as f:
        Mary = pickle.load(f)

# Проверил. У объекта Mary присутствуют все методы и аттрибуты, которые были созданы ранее.

                                            *** Pickle *** 

Pickle может конвертировать объект из памяти в битовую последовательность (serialization/pickling), 
которая может быть сохранена на диск(файловую систему) или отправлена по сети.
Pickle также может восстанавливать объекты из битовой последовательности (deserialization/unpickling).  

+++

+ Скорость работы (возможно использовать паралелльные вычисления) 
+ Работает со многими типами данных Python, включая объекты созданных классов, прямо из коробки

---

- результат преобразования в битовую последовательность непонятен для человека
- т.к. модуль разработан для языка Python, совместимость с дургими языками не гарантирована и не рекомендована. Если нужна совместимость с другими языками,
то лучше использовать модуль json 
- не бозопасен, так как можно создать вредоносные данные для обработки, которые будут выполнять произвольный код во время распаковки.
Поэтому не следуют делать unpickle данных из недоверенных ресурсов.
